* Values:
+ Range of focal lengths for our focus-tunable lenses:
   |                 | min(cm) | max(cm) | min(D) | max(D) | comments  |
   | EL-10-30-TC     |       5 |      12 |   8.33 |     20 | thinner   |
   | EL-10-30-C      |      10 |      20 |      5 |     10 | wo offset |
+ What are lengths of 35 mm lenses:
  + together: 10.5 cm
  + separate: 5.1 cm
  + Location of center of lens = (together - 2*focal_length)/2 = (10.5 - 2*3.5)/2 = 1.75
    + This is from the side towards the image sensor in a camera
+ Firmware of the different drivers
   | Hint   | Lens Driver SN | Firmware               |
   | f2     | AHAB1182       | 1.9.1674 (133899-00-A) |
   | f3     | AHAB0837       | 1.9.1674 (133899-00-A) |
   | unused | AHAB0833       | 1.9.2065 (133899-00-F) |
* Tasks
+ Note down the idea of having an index for your journal where you have keywords, questions,
  etc. and you have dates next to them to indicate where the content is.
+ Find a paper to present to group
+ 2019.01.28 onwards
  + Optimization:
    + Series of prototypes:
      + [X] 1: f2 = f3 = 3.5, and d_f1_f2 = d_f3_f4 = 8cm
	+ d_f1_f2 = 8 is not possible
      + [X] 2: f2 = f3 = 3.5, and d_f1_f2 = d_f3_f4 = 10.65cm
	+ f4 for d_vip_eye = 16cm has crazy values. Why?
	+ d_list should contain 54cm as the closest distance
      + [X] 3: f2 = f3 = 5.0, and d_f1_f2 = d_f3_f4 = 11cm. Works very well.
      + [X] 4: f2 = f3 = 3.5, and d_f1_f2 = d_f3_f4 = 9.6cm. Works very well.
    + [ ] Develop theory for f2 != f3. Implies that d_f1_f2 != d_f3_f4.
      + [ ] Explore prototype space, e.g. f2 = 5.0 and f3 = 3.5 or vice versa
    + [ ] Update prototype_nv_3 with new knowledge of how to find the center of Nikon lenses
    + [ ] What is the minimum d_f1_f2 possible?
      + To know this, we need the location of the optical center of the Nikon lens. This point
        is also called 'nodal point', 'point of convergence'. There are two nodal point for
        complex lenses, we need the one closer to the image sensor side.
      + Just approximate it to be 1cm and hope for the best
      + Incorrect theory:
	+ Original thought: This observation helps in finding a good approximation of the
          location of the optical center of Nikon lenses: When the Nikon lenses are placed one
          after the other, with the image sensor side facing outwards, we get an approximate 1:1
          magnification of the see-through view through the lenses. This tells us that the
          lenses together are acting as a 4f system. focal length specification of the Nikon
          lenses can be used to estimate the precise location of the optical center. The 4f
          system is composed of two 3.5cm lenses placed approximately 7cm apart. This implies
          that the location of the lens is given by: (outer_dimension - 2*focal_length)/2 =
          1.75cm for the 3.5cm lenses.
	+ Why it is incorrect: Applyig same formula for the 5cm lenses gives the location of the
          focal point at 0.15cm. This value is too small.
If we estimate the focal point to be at the center of the lens system, then it is at
        2.65 cm, which means min_d_f1_f2 = 10.65
    + Assuming that we buy the offset lenses:
      + Make diagram
      + Write code based on closed form solutions
      + what is the dependence of the ratio d_f1_f2/d_f3_f4 and f2/f3
      + +Calculate offset lenses+
	+ f2 = f3 = 3.5 cm. 
	  + 27.078 - 7.5 = 19.578 D
	  + 17.366 - 7.5 = 9.866 D
	  + [[https://www.thorlabs.com/newgrouppage9.cfm?objectgroup_id=112]]
	    + The +20 and +10 dpt lenses are good
	+ f2 = f3 = 5.0
	  + 27.078 - 7.5 = 19.578 D
	  + 39.589 - 7.5 = 32.1 D
	  + https://www.thorlabs.com/newgrouppage9.cfm?objectgroup_id=112
	    + The +20 and +33.3 dpt lenses are good
	+ +whose d_f2_f3 is shorter?+
	  + 5.0: 26.67
	  + 3.5: 12.44
    + Assuming that we use large offset lenses:
      + Add additional lenses
      + Recalculate values
      + Does a closed form solution exists?
      + Make diagram
    + +Remove the last source of energy+
    + +Change error metric to use dioptric distances+
    + +? Change lens focal length to be displayed dioptrically+
    + +Calculate d_f2_f3 based on f2+
    + +Change OD.py to use a list of lenses+
    + What are lengths of 35 mm lenses:
      + together: 10.7 cm
      + separate: 5.3 cm
      + guestimate of center of lens: 2.65
    + +What is the range of focal lengths for the optotune lenses?+
      + +Convert range of focal lengths to diopters+
      + +Are the quoted values of EL-10-30-C's focal power range for the case without any offset lens?+
	+ YES.
	+ Test by comparing performance of TC against C without lenses
	+ What is the focal length of the offset lens? -10dpt
	+ What focal length lens compensates for EL-10-30-C? -4dpt
	+ What focal length lens compensates for EL-10-30-TC? -7dpt
      + Range of focal lengths for our focus-tunable lenses:
         |                 | min(cm) | max(cm) | min(D) | max(D) | comments  |
         | EL-10-30-TC     |       5 |      12 |   8.33 |     20 | thinner   |
         | EL-10-30-C      |      10 |      20 |      5 |     10 | wo offset |
  + Update all old code to use new OD.py
  + add main function in abcd_symbolic for tunable_f1_f2 and calculate everything based on
    closed form solutions
  + Make diagram with all parameters calculated exactly
  + Remember to write down that the focal lengths need to change smoothy as well
+ Notes on optimization:
  + Experiments with differential_evolution
    + What makes it work so well?
      + Seems to be using 'L-BFGS-B' underneath. Find out more.
    + Are there optics papers that use differential evolution to solve their problems?
  + Is any other global optimizer as useful as differential_evolution?
    + basinhopping - doesn't seem to work
    + brute - not interesting
    + shgo - not available in scipy=1.1.0. Need scipy=1.2.0. Having difficulty installing, see below
    + dual_annealing - not available in scipy=1.1.0. Need scipy=1.2.0. Having difficulty installing, see below
  + Install scipy=1.2.0 (for shgo and dual_annealing):
    + Need to install some prerequisites: https://github.com/scipy/scipy/blob/master/INSTALL.rst.txt
    + instead of 'python setup.py install --user', use: 'pip install .\'
  + See videos that dad sent
  + Why doesn't the algorithm quit immediately when the error is already 0?
    + Maybe because the error is not zero for the other distances. Check other
      distances as well
  + Resources:
    + module:scipy.optimize: [[https://docs.scipy.org/doc/scipy/reference/optimize.html#module-scipy.optimize]]
    + fmincon CVPR ppt: https://www.ise.ncsu.edu/fuzzy-neural/wp-content/uploads/sites/9/2015/07/MATLAB-Lecture-Note-1.pdf
+ --------------------------------------- LATER
+ *TO DOCUMENT LATER*
+ Change d_f2_f3 to see if the error reduces/increases.
  + Yes, d_f2_f3 seems to have significant effect on the magnification and difference between
    see-through image distance vs object distance
  + Unfortunately, 2*d_f1_f2 or 4*f3 seems to work very well which is very similar to the number
    derived in Howlett. 
** Prototype numbering system
+ tunable_all_symmetric: Refer to prototype_v4.svg/png
  1. f1 = f4
  2. f2 = f3
  3. d_f1_f2 = d_f3_f4
+ tunable_f1_f2_f3: Refer to prototype_v4.svg/png
  1. f4 is fixed-focal-length
  2. d_f1_f2 = d_f3_f4
+ tunable_f1_f2: Refer to prototype_v4.svg/png
  + f3 and f4 are fixed focal length
+ howlett: Howlett-Smithwick-SID2017
+ howlett_1D: Single optical axis version of Howlett-Smithwick-SID2017
+ simplest: Just two focus-tunable lenses, could be overlapping. Physically impossible when
  overlapping of-course and this is only to test the algorithms, not a design choice we're considering
+ 

* Current Tasks
+ Presentation outline
  + In comparing d_OM_eye and d_W_eye, account for the fact that T = I, and not S14
    + If T == I, then d_W_f1 = d_WI_f4 = d_OM_f4. Is this true? Approximately. There is always
      some error.
+ Prototype_v6
  + Try keeping both f2 and f3 as unknowns
  + Same set of equations
  + Try solving iteratively
+ Prototype_v7
  + Try keeping both f2 and f3 as unknowns
  + Two systems of non-linear equations
  + Try solving analytically
+ Prototype_v8
  + Try keeping both f2 and f3 as unknowns
  + Two systems of non-linear equations
  + Try solving analytically
+ Unanswered questions:
  + Why is nonlinsolve only solving one equation - no idea
+ Why is the ABCD matrices for only three unknowns?
  + mentioned, but not explained, here: https://www.iap.uni-jena.de/iapmedia/de/Lecture/Introduction+to+Optical+Modeling+(2016_17+WS)1490310000/_Script_IntroOptMod_Part1.pdf
+ How many solutions are there for a non-linear set of equations
  + [[https://www.wikiwand.com/en/B%25C3%25A9zout%2527s_theorem]]
  + Basically maximum number of (finite) solutions equals the product of degree of all
    non-linear equations
+ What is perturbation theory and is it applicable here?
+ Read literature on ABCD matrices and how to estimate parameters which are part of a linear
  sysem of equations, but can not be isolated into a vector of unknowns
+ Resources for how to solve a non-linear set of equations:
  + https://math.stackexchange.com/questions/2365794/non-linear-system-in-matrix-form
  + https://math.stackexchange.com/questions/1347813/solving-a-system-of-non-linear-equations
  + http://people.dm.unipi.it/meini/TALKS/ilas04_lecture.pdf
+ Analyze with equations if the asymmetrical 4f system would work
  + Write code to implement hypothesized optical system
    + What is the most advanced code among prototype_v1/2/3?
    + Predetermined d1, o2, f4
    + Slider for O_e. Calcualte O from O_e
    + textbox shows (image distance, magnification) before and after correction
+ How would you use ABCD matrices to model the same behaviors?
+ Build GUI that can control the two focus-tunable lenses from one slider - if there is a change
  in magnification, then we can worry about it
+ Test if the asymmetrical 4f system would work
+ Write a python GUI to output perceived image distance and magnification when the inputs are
  the optical design parameters
+ Nikkor lens tech specs: https://www.nikonusa.com/en/nikon-products/product/camera-lenses/af-nikkor-50mm-f%252f1.4d.html#tab-ProductDetail-ProductTabs-TechSpecs
+ Manual calibration
   | Distance to Eye |    f2 |  f3 |
   |             267 |   5.2 | 8.5 |
   |              47 | 12.04 | 7.0 |
+ Firmware of the different drivers
   | Hint   | Lens Driver SN | Firmware               |
   | f2     | AHAB1182       | 1.9.1674 (133899-00-A) |
   | f3     | AHAB0837       | 1.9.1674 (133899-00-A) |
   | unused | AHAB0833       | 1.9.2065 (133899-00-F) |
+ Updates
  + Progress
    + Assembled see-through varifocal occlusion mask display
      + no virtual image yet
      + not automated. can manually move focus plane.
    + Calibrated display to be able to place focus plane at different depths
  + Single SLM system
    + Occlusion mask and virtual image can not be placed at different depths
    + Received HDR LED board from UNC
  + Two slm system
    + Do we want an eyetracker?
      + User studies don't currently depend on eyetracker.
      + Need more beamsplitters to integrate eyetracker
    + Need these Equipment 
      + Polarizing beamsplitter to integrate LCD and increase see-through brightness
      + Polarizing beamsplitter to integrate eyetracker
      + Eyetracker
      + lateral flip 

* User study
+ Planned user study assumes that participant will accommodate to the virtual image plane. When
  the virtual image plane and occlusion mask plane are at different depths, how to force the
  user to accommodate to the virtual image plane?
+ Is it useful to analyze the accommodation state of the eye? Could give a graph of acuity vs
  depth disparity graph

* Pseudocode

| om_dist | rw_dist | rwi_dist | magnification |
|         |         |          |               |

+ Initialize optical and geometric known variables
+ for om_dist = x:increment:y
  + Calculate f3
  + for rw_dist = a:increment:b
    + Calculate f2
    + Calculate magnification

* Paper Outline
+ Abstract
  + We're trying to build an afocal lens system with unit magnification 
+ Introduction
  + Problem statement
  + Previous approaches
  + Contributions
    + System that demonstrates varifocal hard edge occlusion
    + System that uses one SLM to do both occlusion and virtual imagery
    + Perceptual studies for visual acuity comparing fixed-depth hard edge occlusion and
      varifocal hard edge occlusion
+ Related work
  + Video see-through.
    + Hard Limitations:
      + Latency
    + Engineering difficulties:
      + Wide FoV real world image needs to be acquired from viewpoint of pupil - wide fov 3D reconstruction
      + Dynamic range, color gamut needs to match - better displays
  + Occlusion technologies
    + Image forming occlusion. Limitations:
      + Bulky. Fixed depth.
    + Light field occlusion. Limitations:
      + Diffraction.
    + Soft-edge occlusion with compensation. Limitations:
      + Compensation image is at virtual image plane. Shares limitations with video-see through.
+ Method
  + Optical design
    + Similar to earlier designs (Kiyokawa, Wilson and Hong Hua)
    + Monocular benchtop prototype
    + Uses focus-tunable lenses instead of fixed-focus lenses
    + Uses single SLM and controllable per-frame illumination to jointly present occlusion mask
      and virtual image
  + Operational Detail
    + Eye-tracker to get gaze direction.
    + Accommodation distance is set to nearest virtual pixel from gaze direction.
    + Focus-tunable lens brings real world at accommodation distance into focus
    + HDR LED can change illumination per LCoS frame
    + LCD/LCoS jointly depicts occlusion mask and virtual image
+ Prototype Results
  + See through images and videos
+ User studies
  + Visual acuity
    + Hypothesis:
      + Perceived occlusion mask of fixed-depth occlusion mask can appear blurred for various
        accommodation states.
      + This blurring reduces visual acuity at those depths
  + Perceived realism
+ Discussion
  + Limitations
    + Bulky form-factor
  + Future work
    + Primarily in direction of miniaturization
+ Conclusion


